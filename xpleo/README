2019/12/17 Reto Stockli

ABSTRACT
========

This is a short introduction to the xpusb code. I've created this code because there wasn't any programs available 
for LINUX and OSX X-Plane users who build home cockpits usinb custom hardware. There is a "open source" hardware project 
called OpenCockpits (http://www.opencockpits.com) which provides pretty cool I/O hardware, so called IOCARDS. 
However, their software is only intended for Microsoft Windows users. The aim of xpusb is to use the 
OpenCockpits and Leo Bodnar's BU0836 hardware together with X-Plane on Unix systems. 
Below you will find a short description to the xpusb functionality.

GENERAL
=======

xpusb is a set of C codes which facilitates programmers and developers to write applications
to access OpenCockpits and Leo Bodnar's hardware.
This is different to the Windows applications that are provided e.g. by OpenCockpits:

The advantage of xpusb is: it can be made very specific to your home cockpit requirements. 
The code is very flexible for dealing with the highly specialized flight controls or electrical/mechanical 
interactions that are neeeded in modern airplane simulations.

The disadvantage of xpusb is: users need to master some basic C programming.

The current code allows to use a small set of the OpenCockpits hardware:
- master card(s) connected through the USB expansion card including analog axes
- USB Servos including analog axes
- USB Keys
- USB DC Motors including analog axes
- Leo Bodnar's BU0836X/A joystick and inputs

xpusb communicates with X-Plane by subscribing to specific datarefs through the XPSERVER plugin.
This subscription is pretty simple to handle since the client (xpusb) decides which datarefs it wants
and which datarefs it does not want any more. More information can be found on the XPSERVER README file
and examples are visible in the individual source codes found in xpusb.

SPECIFIC
========

The OpenCockpits USB devices are of the HID class. We directly access them through the operating system HID driver 
when we make use of the HIDAPI library.

For instance the OpenCockpits USB Expansion card has two interrupt endpoints: one for reading and one for writing. 
They transfer data in 8 byte chunks and have a 10 ms polling interval. The main difficulties with the xpusb 
was to get non-blocking asynchronous reads and writes, especially as a non-C programmer, 
and to reverse engineer the Mastercard I/O protocol.

For Linux and OSX the newly developed HIDAPI code came in handy. It includes asynchronous read and write to HID devices. 
The HIDAPI code is included in this source code distribution. (the libusb-1.0 library previously had to be installed
separately).

HOW TO OPERATE
==============

Install gcc and build essentials, autotools etc:
sudo apt install build-essential -y
sudo apt install autoconf -y

Resolve dependencies: libudev
Install with e.g. Debian/Ubuntu:
sudo apt install libudev-dev -y


--------------------------------------------------------------------
NEW: First configure, make and make install the library libxpcockpit

cd ../libxpcockpit

If you cloned from git first run these in order to populate all needed automake/autoconf files:
autoreconf
automake --add-missing
autoreconf

Then type:
./configure
make
make install

Then jump back to this directory here.
--------------------------------------------------------------------


If you cloned from git first run these in order to populate all needed automake/autoconf files:
autoreconf
automake --add-missing
autoreconf

Then type:
./configure
make
cd src
./xpusb test

This will run usbiocards with the inidata/test.ini settings file operating a single mastercard on a USB expansion card

If you work on linux and your OpenCockpits usb expansion card or
Leo Bodnar card is not found, then you may have a HIDRAW permission
problem. Please copy the file in doc/99-hidraw-permissions.rules
to /dev/udev/rules.d (or /usr/lib/udev/rules.d) and restart your system. 
This file directs the system's HIDRAW kernel driver to 
give R/W permission to all HID devices.

Please look at the following files for how to change to different settings:
- other settings files in inidata/
- other sample hardware codes visible from src/xpusb.c


CODE STRUCTURE

xpusb.c
-------

The main application code is: xpusb.c. Take a look at it. It has two phases: initialization and runloop. During the initialization data structures are set up, the TCP/IP client is started and the USB expansion card is detected and initialized. If any of those things fail, the code exits. The USB expansion card has to be connected before the code is started. X-Plane does however not need to be running with a TCP/IP server yet. Unplugging the USB expansion card while the program is running will produce an exit condition, too. Plug'n'play will be implemented in a later stage. The runloop cycles through the following steps: 

- USB read from the USB expansion card and other cards
- checking for a new TCP/IP connection (has X-Plane been started yet?)
- TCP/IP receive from X-Plane
- the user-space application (mcp_737) which deals with switches, displays and outputs
- USB send to the USB expansion card
- TCP/IP send to X-Plane
- saving copies of the data structures

xpusb.c can be stopped with 'ctrl-c'. It calls a signal handler which then tries to gracefully terminate the TCP/IP connection, and stop the USB read and write threads before exiting.

handle_server.c
---------------

handle_server.c deals with the TCP/IP connection to X-Plane. Data is transferred over TCP/IP in the format described in the documentation of the XPCONNECT server application (separate package).

libiocards.c
------------

libiocards.c contains all the functions needed to read from the digital inputs or send a display value etc. 
It also handles the initialization and exit procedure of the USB connected cards. 
Its functions include the reverse engineered iocards protocol.  

libusb_interface.c --> deprecated. But maybe still useful.
------------------

libusb_interface.c deals with the USB initialization, read and write calls via libusb-1.0:
- threaded asynchronous interrupt read
- regular asynchronous bulk write

hidapi_interface.c
------------------
hidapi_interface.c deals with direct HID access to the USB devices
The following changes were made to hid_open() in hid_linux.c and hid_darwin.c:

	if (cur_dev->vendor_id == vendor_id &&
	cur_dev->product_id == product_id &&
ADDED:
	strlen(cur_dev->path) != 0) {
Since the Mastercard Expansion USB card has VID=0,PID=0, and it has a USB access path, while
Other (software components) may show up with VID=0,PID=0 without a path.


iniparser.c
-----------
+ dictionary.c

iniparser.c reads the initial file 'usbiocards.ini'

iocard_test.c
-------------

Sample code operating an input and an output and a display on a single master card connected to the
USB expansion card

